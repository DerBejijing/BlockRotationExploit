package io.github.derbejijing.coordinatecracker.math;

import java.util.Arrays;

public class Matrix2 {

	private int[][] matrix;
	
	private final Vector2 size;
	private final Vector2 center;
	
	/**
	* Matrix2 constructor using given bounds and center
	* bounds: size of matrix (same way as an array)
	* center: center of the matrix
	*/
	public Matrix2(Vector2 bounds, Vector2 center) {
		this.size = bounds;
		this.center = center;
		
		this.matrix = new int[bounds.getX()][bounds.getZ()];
	}

	
	/**
	* Matrix2 constructor copying an existing Matrix2
	* matrix: Matrix2 instance to copy
	*/
	public Matrix2(Matrix2 matrix) {
		this.size = matrix.getSize();
		this.center = matrix.getCenter();
		
		int[][] array = new int[size.getX()][size.getX()];
		for(int x = 0; x < size.getX(); x++) {
			for(int z = 0; z < size.getZ(); z++) {
				array[x][z] = matrix.getMatrixArray()[x][z];
			}
		}
		
		this.matrix = array;
	}

	
	/**
	* Matrix2 constructor using an Integer array and center
	* matrix: 2-dimensional Integer array
	* center: center of the matrix
	*/
	public Matrix2(int[][] matrix, Vector2 center) {
		this.size = new Vector2(matrix.length, matrix[0].length);
		this.center = center;
		
		int[][] array = new int[this.size.getX()][this.size.getZ()];
		for(int x = 0; x < this.size.getX(); x++) {
			for(int z = 0; z < this.size.getZ(); z++) {
				array[x][z] = matrix[x][z];
			}
		}
		
		this.matrix = array;
	}
	
	
	/**
	* Returns size as a Vector2 instance
	*/
	public Vector2 getSize() {
		return this.size;
	}
	
	
	/**
	* Returns x-size
	*/
	public int getSizeX() {
		return this.size.getX();
	}
	
	
	/**
	* Returns z-size
	*/
	public int getSizeZ() {
		return this.size.getZ();
	}
	
	
	/**
	* Returns center as a Vector2 instance
	*/
	public Vector2 getCenter() {
		return this.center;
	}
	
	
	/**
	* Returns x-center
	*/
	public int getCenterX() {
		return this.center.getX();
	}
	
	
	/**
	* Returns z-center
	*/
	public int getCenterZ() {
		return this.center.getZ();
	}
	
	
	/**
	* Returns matrix as an Integer array
	*/
	public int[][] getMatrixArray() {
		return this.matrix;
	}
	
	
	/**
	* Returns value stored at a given index
	* index: index represented by a Vector2 instance
	*/
	public int getValue(Vector2 index) {
		try {
			return this.matrix[index.getX()][index.getZ()];
		} catch(NullPointerException e) {
			e.printStackTrace();
			return 0;
		}
	}
	
	
	/**
	* Returns the matrix as a fancy String
	* good for debugging purposes
	*/
	public String getString() {
		String lineSeparator = System.lineSeparator();
		StringBuilder sb = new StringBuilder();

		for (int[] row : this.matrix) {
			sb.append(Arrays.toString(row)).append(lineSeparator);
		}

		return sb.toString();
	}
	
	
	/**
	* Sets matrix Integer array to a given Integer array
	* matrix: Integer array to copy
	*/
	public void setMatrixArray(int[][] matrix) {
		this.matrix = matrix;
	}
	
	/**
	* Sets given index to given value
	* index: index represented by a Vector2 instance
	* value: Integer value
	*/
	public void setValue(Vector2 index, int value) {
		this.matrix[index.getX()][index.getZ()] = value;
	}
	
}
