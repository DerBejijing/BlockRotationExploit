package io.github.derbejijing.coordinatecracker.network.master;

import java.util.ArrayList;

/**
 * 
 * The code seen below is UNTESTET
 * and was just uploaded because I work on this from multiple places on multiple devices and need a place to store my "progress"
 * 
 */
public class ControlNode extends Thread {

	private static ControlNode INSTANCE;
	private ArrayList<SlaveConnection> slaveConnections;
	private boolean running;
	private int port;
	private int clientCount;
	
	private ClientSupply clientSupply;
	
	
	public ControlNode(int port) {
		INSTANCE = this;
		slaveConnections = new ArrayList<SlaveConnection>();
		this.port = port;
	}
	
	
	public void run() {
		this.running = true;
		this.clientSupply = new ClientSupply(this.port, INSTANCE);
		clientSupply.start();
		
		while(this.running) {
			
			if(clientCount != slaveConnections.size()) {
				System.out.println("Handling new thread");
				++this.clientCount;
			}
			
		}
		
		this.killThread();
		System.out.println("end");
	}
	
	
	public void supplyNewClient(SlaveConnection connection) {
		this.slaveConnections.add(connection);
		
		System.out.println("New Client joined: " + connection.getHost());
	}
	
	
	public void removeClient(SlaveConnection connection) {
		System.out.println("Client " + connection.getHost() + " disconnected");
		this.slaveConnections.remove(connection);
	}
	
	
	public void killThread() {
		this.running = false;
		this.clientSupply.killThread();
		if(slaveConnections.size() > 0) {
			for(SlaveConnection sc : slaveConnections) {
				sc.killThread();
			}
		}
	}
	
	
	public boolean running() {
		return this.running;
	}
	
	
	public static ControlNode getInstance() {
		return INSTANCE;
	}
	
}
