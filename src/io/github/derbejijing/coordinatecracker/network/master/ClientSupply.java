package io.github.derbejijing.coordinatecracker.network.master;

import java.net.ServerSocket;
import java.net.Socket;

/**
 * 
 * The code seen below is UNTESTET
 * and was just uploaded because I work on this from multiple places on multiple devices and need a place to store my "progress"
 * 
 */
/**
 * I didn't want to call this "SlaveSupply" as that seemed a bit evil
 */
public class ClientSupply extends Thread {

	private final ControlNode masterInstance;
	
	private ServerSocket socket;
	private final int port;
	private boolean running;
	
	
	public ClientSupply(int port, ControlNode masterInstance) {
		this.port = port;
		this.masterInstance = masterInstance;
		this.socket = null;
	}
	
	
	public void run() {
		this.running = this.startServer();
		
		while(this.running) {
			Socket clientSocket = null;
			
			try {
				clientSocket = socket.accept();
				
				this.masterInstance.supplyNewClient(new SlaveConnection(clientSocket, masterInstance));
			} catch(Exception e) {
				e.printStackTrace();
			}
			
		}
	}
	
	
	public void killThread() {
		if(this.running) {
			this.running = false;
			try {
				this.socket.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	
	public boolean isRunning() {
		return this.running;
	}
	
	
	private boolean startServer() {
		try {
			this.socket = new ServerSocket(this.port);
			return true;
		} catch(Exception e) {
			System.out.println("Cannot open Port " + this.port);
			System.out.println("Stacktrace: ");
			e.printStackTrace();
			return false;
		}
	}
}
