package io.github.derbejijing.coordinatecracker.utils;

import io.github.derbejijing.coordinatecracker.data.EnumRotation;
import io.github.derbejijing.coordinatecracker.math.Matrix2;
import io.github.derbejijing.coordinatecracker.math.Matrix3;
import io.github.derbejijing.coordinatecracker.math.Vector2;

public class MatrixHelper {
	
	/**
	* Rotates a Matrix3 instance by a given angle (0, 90, 180, 270) clockwise
	* Effectively just copies values to a new position
	* matrixIn: Matrix3 instance to be rotated
	* degrees: EnumRotation value the matrix should be rotated
	*/
	public static Matrix3 rotateMatrix(Matrix3 matrixIn, EnumRotation degrees) {
		Matrix3 m = new Matrix3(matrixIn);
		
		int rotations = 0;
		
		if(degrees.value % 90 == 0) {
			rotations = degrees.value / 90;
		}
		else return m;
		
		Matrix3 matrixOut = new Matrix3(m.getSize(), m.getCenter());
		
		for(int i = 0; i < rotations; i++) {
			for(int y = 0; y < matrixIn.getSizeY(); y++) {
				matrixOut.setLayer(y, rotateMatrix(m.getLayer(y)));
			}
			m.setMatrixArray(matrixOut.getMatrixArray());
		}
		
		return matrixOut;
	}
	
	
	/**
	* Rotates a Matrix2 instance by 90 degrees clockwise
	* Effectively just copies values to a new position
	* matrixIn: Matrix2 instance to be rotated
	*/
	public static Matrix2 rotateMatrix(Matrix2 matrixIn) {
		final int M = matrixIn.getSizeX();
		final int N = matrixIn.getSizeZ();
		int[][] ret = new int[N][M];
		for (int r = 0; r < M; r++) {
			for (int c = 0; c < N; c++) {
				ret[c][M - 1 - r] = matrixIn.abs(new Vector2(r, c));
			}
		}
		
		return new Matrix2(ret, matrixIn.getCenter());
	}
	
}
