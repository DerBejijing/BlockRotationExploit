package io.github.derbejijing.coordinatecracker.utils;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import io.github.derbejijing.coordinatecracker.math.Vector3;

public class MathHelper {

	/**
	* Returns rotation for a specific coordinate for minecraft 1.12
	* pos: Vector3 instance representing the position
	*/
	public static byte getRotationForVector(Vector3 pos) {
		return (byte) (Math.abs((int) getRandomForVector(pos) >> 16) % 4);
	}

	
	/**
	* Returns a randomness seed depending on the position for minecraft 1.12
	* This function is useless
	* pos: Vector3 instance representing the position
	*/
	private static long getRandomForVector(Vector3 pos) {
		return getRandomForCoordinates(pos.getX(), pos.getY(), pos.getZ());
	}

	
	/**
	* Returns a randomness seed depending on the position for minecraft 1.12
	* pos: Vector3 instance representing the position
	*/
	private static long getRandomForCoordinates(int x, int y, int z) {
		long i = (long) (x * 3129871) ^ (long) z * 116129781L ^ (long) y;
		i = i * i * 42317861L + i * 11L;
		return i;
	}

	
	/**
	* Returns rotation for a specific coordinate for minecraft 1.16
	* pos: Vector3 instance representing the position
	*/
	public static int getRotationForVector_1_16(Vector3 pos) {
		Random r = new Random();
		r.setSeed(getRandomForVector_1_16(pos));
		int rot = Math.abs((int) r.nextLong()) % 4;
		return rot;
	}

	
	/**
	* Returns a randomness seed depending on the position for minecraft 1.16
	* This function is useless
	* pos: Vector3 instance representing the position
	*/
	private static long getRandomForVector_1_16(Vector3 pos) {
		return getRandomForCoordinates_1_16(pos.getX(), pos.getY(), pos.getZ());
	}

	
	/**
	* Returns a randomness seed depending on the position for minecraft 1.16
	* pos: Vector3 instance representing the position
	*/
	private static long getRandomForCoordinates_1_16(int x, int y, int z) {
		long i = (long) (x * 3129871) ^ (long) z * 116129781L ^ (long) y;		
		i = i * i * 42317861L + i * 11L;
		return i >> 16;
	}
	
	
	/**
	* Flips order of two Integers and returns them as a list
	* Who would make somthing useless as that?
	* Oh it was me who made this
	* a: Integer 1
	* b: Integer 2
	*/
	public static List<Integer> flip(int a, int b) {
		List<Integer> result = new ArrayList<>();
		result.add(b);
		result.add(a);

		return result;
	}
	
	
	/**
	* Returns true if a String is an Integer
	* strIn: String to be tested
	*/
	public static boolean isInteger(String strIn) {
		try {
			Integer.valueOf(strIn);
			return true;
		} catch(Exception e) {
			return false;
		}
	}
	
	
	/**
	* Gets the absolute value of a long
	* l: long to be returned absolute
	*/
	public static long getValue(long l) {
		return l<0 ? l*-1 : l;
	}

	
	/**
	* Gets the absolute value of a float
	* f: float to be returned absolute
	*/
	public static float getValue(float f) {
		return f<0 ? f*-1 : f; 
	}
	
	
	/**
	* Returns the bigger long
	* a: long 1
	* b: long 2
	*/
	public static long max(long a, long b) {
		return a < b ? b : a;
	}
	
	
	/**
	* Returns the bigger float
	* a: float 1
	* b: float 2
	*/
	public static float max(float a, float b) {
		return a < b ? b : a;
	}
}
